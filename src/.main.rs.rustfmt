use std::cmp::min;
use std::collections::{HashMap, HashSet};

use std::fs::{self, create_dir_all, remove_dir_all, File};
use std::io::prelude::Write;
use std::io::{stdin, BufReader, Error, ErrorKind, Read, Result};
use std::path::{Path, PathBuf};
use std::sync::mpsc::channel;
use std::sync::Arc;
use std::thread;
use std::thread::JoinHandle;
use std::time::Duration;

use chrono::Utc;
use clap::{App, Arg};
use color_eyre::Report;
use colored::*;
use lazy_static::lazy_static;
use notify::{DebouncedEvent, RecommendedWatcher, RecursiveMode, Watcher};
use regex::{Captures, Regex};
use rss::{Channel, GuidBuilder, ItemBuilder};

use rss::validation::Validate;

mod scanner;
use scanner::Scanner;

mod directory_tree;
use directory_tree::DirectoryTree;

mod common;
use common::{hey, nope, EpiStatus, EpiStatusLookup, DOMAIN, SEEDLING};

mod regexes;

mod entry;
use entry::Entry;

///////////
// UTILS //
///////////

fn load_file<P: AsRef<Path>>(path: P) -> Result<String> {
    let file = File::open(path).expect("unable to open file path");
    let mut buf_reader = BufReader::new(file);
    let mut contents = String::new();
    buf_reader
        .read_to_string(&mut contents)
        .expect("unable to read file to string");
    return Ok(contents);
}

// see https://stackoverflow.com/questions/26958489/how-to-copy-a-folder-recursively-in-rust
fn copy_dir_all(src_string: Arc<String>, dst_string: Arc<String>) -> Result<()> {
    // Create paths
    let src = Path::new(src_string.as_str());
    let dst = Path::new(dst_string.as_str());

    // Create target directory
    fs::create_dir_all(&dst).expect("unable to create destination directory while copying");
    let entries = fs::read_dir(src).expect("unable to read directory while copying");

    for entry in entries {
        let entry = entry.expect("unable to get entry from directory");
        let ty = entry.file_type().expect("unable to get file type");
        if ty.is_dir() {
            // Since the method is recrusive, we have to do this kind of insane
            // translation between the string we've been given, and then the new
            // item we want to utilize.
            let new_src = Arc::new(String::from(
                entry
                    .path()
                    .as_os_str()
                    .to_str()
                    .expect("unable to get source path as str while copying"),
            ));
            let new_dest = Arc::new(String::from(
                dst.join(entry.file_name())
                    .as_os_str()
                    .to_str()
                    .expect("unable to get dest path as str while copying"),
            ));
            // Finally can copy again
            // I'm sure there is a much better way to do this
            copy_dir_all(new_src, new_dest).expect("unable to copy recursively");
        } else {
            fs::copy(entry.path(), dst.join(entry.file_name()))
                .expect("unable to copy single file");
        }
    }
    Ok(())
}

lazy_static! {
    static ref COMRAK_OPTIONS: comrak::ComrakOptions = comrak_options();
}

// set the comrak html -> md settings
fn comrak_options() -> comrak::ComrakOptions {
    let mut options = comrak::ComrakOptions::default();
    options.render.unsafe_ = true;
    options.render.escape = false;
    options.parse.smart = true;
    options.extension.table = true;
    options.extension.autolink = true;
    options.extension.tagfilter = false;
    options.extension.footnotes = true;
    return options;
}

// pretty much always want this backtrace on
fn setup() -> std::result::Result<(), Report> {
    if std::env::var("RUST_BACKTRACE").is_err() {
        std::env::set_var("RUST_BACKTRACE", "1")
    }
    color_eyre::install().expect("unable to install color_eyre");
    Ok(())
}

/////////////
// EXTRACT //
/////////////

fn extract_references<'a>(entries: &'a Vec<Entry>) -> HashMap<String, Vec<String>> {
    let mut result = HashMap::<String, Vec<String>>::new();
    for entry in entries {
        for link in &entry.links {
            result
                .entry(link.clone())
                .or_insert(Vec::new())
                .push(entry.id.clone());
        }
    }
    return result;
}

fn extract_recent_entries(entries: &mut Vec<Entry>) -> String {
    let length = min(entries.len(), 20);

    entries.sort_by(|a, b| {
        b.modification_date
            .partial_cmp(&a.modification_date)
            .unwrap()
    });

    entries.truncate(length);

    return entries
        .iter()
        .map(|x| format!("* {} [[{}]]", x.modification_date, x.id))
        .collect::<Vec<String>>()
        .join("\n");
}

////////////
// FORMAT //
////////////

fn format_references(references: Vec<String>) -> String {
    if references.is_empty() {
        return String::new();
    }

    let mut result = String::from("referenced by: ");
    result.push_str(
        references
            .iter()
            .filter(|x| *x != "meta")
            .map(|x| format!("[[{}]]", x))
            .collect::<Vec<String>>()
            .join(" ")
            .as_str(),
    );

    return result;
}

fn format_img_dither_wrap_anchor(body: &str) -> String {
    return regexes::DITHERED_IMG_REGEX
        .replace_all(body, |cap: &Captures| {
            let img = &cap[1];
            let name = &cap[2];

            return format!(
                "<a class='img' href=\"resources/img/{}.png\">{}</a>",
                name, img,
            );
        })
        .to_string();
}

// recursively find all .md files in the content path
// and turn them into entries
fn collect_entries(content_path: &str) -> Result<Vec<Entry>> {
    let mut result: Vec<Entry> = Vec::new();
    let mut todo: Vec<PathBuf> = Vec::new();
    let root = Path::new(content_path).to_path_buf();
    todo.push(root);

    while todo.len() > 0 {
        let file = todo.pop().unwrap();
        let entries = fs::read_dir(file)
            .expect("unable to read file")
            .map(|e| e.map(|x| x.path()))
            .collect::<Result<HashSet<PathBuf>>>()
            .expect("unable to collect entries.");

        let directories = entries
            .iter()
            .filter(|e| e.is_dir())
            .map(|e| e.to_path_buf())
            .collect::<HashSet<PathBuf>>();

        let files: Vec<Entry> = entries
            .difference(&directories)
            .filter(|e| match e.extension() {
                Some(ext) => ext == "md",
                None => false,
            })
            .filter_map(|e| Entry::from_path(e))
            .collect();

        todo.extend(directories.into_iter().collect::<Vec<PathBuf>>());
        result.extend(files);
    }

    // now that all entries are collected, we can calculate references
    let references = extract_references(&result);

    // attach references
    result.iter_mut().for_each(|x| {
        let opt = references.get(&x.id);
        x.references = match &opt {
            Some(refs) => Some(refs.to_vec()),
            None => None,
        };
    });

    return Ok(result);
}

///////////////
// TEMPLATES //
///////////////

fn render_md(s: &str) -> String {
    // TODO: move to format_parse function by checking
    let wrapped = format_img_dither_wrap_anchor(s);

    return comrak::markdown_to_html(&wrapped, &COMRAK_OPTIONS);
}

fn make_template(item: &str) -> String {
    return format!("{{{{ {} }}}}", item);
}

fn replace_template<'a>(
    epistemic_lookup: Arc<EpiStatusLookup>,
    body: &str,
    item: &str,
    replacement: &str,
) -> String {
    let repl = Scanner::new(replacement, Some(epistemic_lookup)).convert();
    let html = render_md(&repl);
    return body.replace(make_template(item).as_str(), &html);
}

fn replace_templates<'a>(
    epistemic_lookup: Arc<EpiStatusLookup>,
    body: &str,
    mapping: Vec<(&str, &str)>,
) -> String {
    let mut body = String::from(body);
    for (key, value) in mapping.iter() {
        body = replace_template(Arc::clone(&epistemic_lookup), body.as_str(), key, &value)
    }
    return body;
}

fn render_gemtext(s: &str) -> String {
    // first convert links
    let mut gem_links: Vec<String> = vec![
        format!("=> gemini://{}/index.gmi index and recent changes", DOMAIN).to_owned(),
        format!(
            "=> gemini://{}/directory.gmi directory of all pages",
            DOMAIN
        )
        .to_owned(),
    ];

    let mut http_links = vec![];

    // Get all internal links
    let mut output = regexes::INTERNAL_LINK_REGEX
        .replace_all(s, |caps: &Captures| {
            let link = &caps[3];

            let gemlink = format!("=> gemini://{}/{}.gmi {}", DOMAIN, link, link);
            gem_links.push(gemlink);

            return format!("[{}]", link);
        })
        .to_string();

    // TODO: create memex syntax for linking to external gemini capsules

    output = regexes::MD_LINK_REGEX
        .replace_all(&output, |caps: &Captures| {
            let title = &caps[1];
            let link = &caps[2];

            let gemlink = format!("=> {} {}", link, title);
            http_links.push(gemlink);

            return format!("[{}]", title);
        })
        .to_string();

    regexes::TAG_SRC_REGEX.captures_iter(&output).for_each(|x| {
        let src = &x[1];
        if src.starts_with("resources/") {
            http_links.push(format!("=> https://{}/{}", DOMAIN, src));
        } else {
            http_links.push(format!("=> {}", src));
        }
    });

    output = regexes::HTML_TAG_REGEX.replace_all(&output, "").to_string();

    output.push_str("\nGemini Links:\n");
    let links_str = String::from(gem_links.join("\n"));
    output.push_str(&links_str);

    output.push_str("\n\nWeb Links:\n");
    let links_str = String::from(http_links.join("\n"));
    output.push_str(&links_str);

    return output;
}

//////////////
// COMMANDS //
//////////////

fn build_entry(
    entry: Entry,
    base_template: Arc<String>,
    destination_path: Arc<String>,
    formatted_directory: Arc<String>,
    recents: Arc<String>, // TODO: this only is needed on index page
    epistemic_lookup: Arc<EpiStatusLookup>,
) -> Result<()> {
    // get or set replacements
    let contents = entry.content.as_str();
    let timestamp = entry.modification_date;
    let references = format_references(entry.references.unwrap_or(Vec::new()));
    let outline = entry.outline_md;

    // make replacements
    let replacements = vec![
        ("directory", formatted_directory.as_str()),
        ("content", contents),
        ("references", &references),
        ("timestamp", timestamp.as_str()),
        ("toc", &outline),
        ("recent", recents.as_str()),
    ];

    // write replacements
    let html = replace_templates(epistemic_lookup, base_template.as_str(), replacements);

    let fname = format!("{}/{}.html", destination_path, entry.id);
    hey(format!("{} => {}", entry.id.yellow(), fname.green()));
    let mut fd = File::create(fname).expect("unable to create file");
    let res = fd.write_all(html.as_bytes());
    if res.is_err() {
        return Err(res.err().unwrap());
    }

    // create gemtext files
    let gemtext = contents
        .replace(
            make_template("directory").as_str(),
            formatted_directory.as_str(),
        )
        .replace(make_template("recent").as_str(), recents.as_str());
    let gemtext = render_gemtext(&gemtext);

    let fname = format!("{}/{}.gmi", destination_path, entry.id);
    hey(format!("{} => {}", entry.id.yellow(), fname.green()));
    let mut fd = File::create(fname).expect("unable to create file");
    let res = fd.write_all(gemtext.as_bytes());
    if res.is_err() {
        return Err(res.err().unwrap());
    }

    return Ok(());
}

fn validate_and_copy_rss(dest_path_string: Arc<String>) -> JoinHandle<()> {
    let handle = thread::spawn(move || {
        let rss_path = Path::new("rss.xml").to_path_buf();
        let _channel = parse_rss(&rss_path);
        let dest_path = Path::new(dest_path_string.as_str());
        fs::copy(rss_path, dest_path.join("rss.xml")).expect("unable to copy rss.xml file");
    });
    return handle;
}

fn build(
    content_path: &str,
    template_path: &str,
    destination_path: &str,
    resources_path: &str,
) -> Result<()> {
    hey("building memex...");

    // Create a vec of thread handles to join later
    let mut thread_handles = vec![];

    // A bunch of shared strings and paths
    let destination_path_string = Arc::new(String::from(destination_path));
    let destination_path_arc = Arc::clone(&destination_path_string);
    let resources_path_string = Arc::new(String::from(resources_path));
    let resources_path_arc = Arc::clone(&resources_path_string);
    let resources_dest_string = Arc::new(String::from(
        Path::new(destination_path)
            .join(resources_path)
            .as_os_str()
            .to_str()
            .expect("unable to create resources destination path"),
    ));
    let resources_dest_arc = Arc::clone(&resources_dest_string);

    hey("cleaning destination dir...");
    let removal = remove_dir_all(destination_path);
    if removal.is_err() {
        hey("output destination doesn't exist...");
    }
    create_dir_all(destination_path).expect("unable to create destination path");

    hey("validating rss...");
    thread_handles.push(validate_and_copy_rss(destination_path_arc));

    hey("copying resources...");
    thread_handles.push(thread::spawn(move || {
        copy_dir_all(resources_path_arc, resources_dest_arc)
            .expect("unable to copy directory for resources");
    }));

    return match collect_entries(content_path) {
        Ok(mut entries) => {
            hey(format!(
                "compiling {} entries...",
                entries.len().to_string().bright_yellow()
            ));

            // These values are shared between threads so they have to be wrapped in atomic
            // reference counters in order to be cleaned up appropriately at the end
            let base_template =
                Arc::new(load_file(template_path).expect("couldn't load base template"));
            let directory = Arc::new(DirectoryTree::from_entries(&entries, "pages"));
            let formatted_directory = Arc::new(directory.to_string());
            let recents = Arc::new(extract_recent_entries(&mut entries.clone()));
            let epistemic_lookup = Arc::new(
                entries
                    .iter()
                    .map(|e| (e.id.clone(), e.epistemic_status.clone()))
                    .collect(),
            );

            // handle special case for directory page
            entries
                .iter_mut()
                .filter(|x| x.id == "directory")
                .for_each(|x| x.content = directory.format_directory_page(&x.content));

            for entry in entries {
                let base_template_arc = Arc::clone(&base_template);
                let destination_path_arc = Arc::clone(&destination_path_string);
                let formatted_directory_arc = Arc::clone(&formatted_directory);
                let recents_arc = Arc::clone(&recents);
                let epistemic_lookup_arc = Arc::clone(&epistemic_lookup);

                let handle = thread::spawn(move || {
                    build_entry(
                        entry,
                        base_template_arc,
                        destination_path_arc,
                        formatted_directory_arc,
                        recents_arc,
                        epistemic_lookup_arc,
                    )
                    .expect("couldn't build an entry");
                });

                thread_handles.push(handle);
            }

            for handle in thread_handles {
                handle.join().expect("issue joining thread");
            }

            return Ok(());
        }
        Err(e) => {
            nope("couldn't collect paths...");
            Err(e)
        }
    };
}

fn parse_rss(input_rss_path: &PathBuf) -> Result<Channel> {
    let file = File::open(input_rss_path).unwrap();
    let channel = Channel::read_from(BufReader::new(file)).unwrap();
    channel
        .validate()
        .expect("should be able to validate rss.xml file...");

    return Ok(channel);
}

fn add_rss_post(rss_path: PathBuf) -> Result<()> {
    let mut channel = parse_rss(&rss_path).expect("unable to parse rss");

    hey("Title?");
    let mut title = String::new();
    stdin().read_line(&mut title).unwrap();
    title.pop();

    hey("Link?");
    let mut link = String::new();
    stdin().read_line(&mut link).unwrap();
    link.pop();

    hey("Description?");
    let mut description = String::new();
    stdin().read_line(&mut description).unwrap();
    description.pop();

    let guid = GuidBuilder::default()
        .build()
        .expect("unable to build new guid");

    let rfc2822 = Utc::now().to_rfc2822();

    let item = ItemBuilder::default()
        .title(Some(title))
        .link(Some(link))
        .description(Some(description))
        .guid(Some(guid))
        .pub_date(Some(rfc2822.clone()))
        .build()
        .expect("could not build item");

    channel.set_last_build_date(rfc2822.clone());

    let mut cloned = channel.clone();
    let mut items = channel.into_items();
    items.push(item);
    cloned.set_items(items);

    cloned.validate().expect("could not validate");

    let writer = File::create(rss_path).expect("could not open rss path for writing");

    cloned
        .pretty_write_to(writer, b' ', 2)
        .expect("could not write new post to rss file.");

    return Ok(());
}

fn watch(
    content_path: &str,
    template_path: &str,
    destination_path: &str,
    resources_path: &str,
) -> notify::Result<()> {
    // Create a channel to receive the events.
    let (tx, rx) = channel();

    // Automatically select the best implementation for your platform.
    // You can also access each implementation directly e.g. INotifyWatcher.
    let mut watcher: RecommendedWatcher =
        Watcher::new(tx, Duration::from_secs(2)).expect("unable to create watcher");

    // Add a path to be watched. All files and directories at that path and
    // below will be monitored for changes.
    watcher
        .watch(content_path, RecursiveMode::Recursive)
        .expect("unable to watch content path");
    watcher
        .watch(resources_path, RecursiveMode::Recursive)
        .expect("unable to watch resources path");
    watcher
        .watch(template_path, RecursiveMode::Recursive)
        .expect("unable to watch template path");

    // This is a simple loop, but you may want to use more complex logic here,
    // for example to handle I/O.

    let watching = "watching for changes!".bright_magenta().to_string();
    hey(&watching);
    loop {
        match rx.recv() {
            Ok(event) => match event {
                DebouncedEvent::NoticeRemove(_) => (),
                _ => {
                    hey("updating...");
                    println!("{:#?}", event);
                    build(
                        content_path,
                        template_path,
                        destination_path,
                        resources_path,
                    )
                    .expect("unable to build memex");
                    hey(&watching);
                }
            },
            Err(e) => println!("watch error: {:?}", e),
        }
    }
}

fn rename(content_path: &str, old: &str, new: &str) -> Result<()> {
    let entries = collect_entries(content_path).expect("couldn't collect entries.");
    hey(format!("replacing {} with {}", old, new));

    let as_string = format!(r"\[\[{}\]\]", old);
    let regex = Regex::new(as_string.as_str()).expect("invalid replacement regex");

    for entry in entries {
        if regex.is_match(&entry.content) {
            let replaced = regex.replace_all(&entry.content, format!("[[{}]]", new));
            let path = Path::new(content_path).join(entry.path);
            hey(format!("writing to {:#?}", path.as_os_str()));
            let mut fd = File::create(path).expect("couldn't create new file");
            fd.write_all(replaced.as_bytes())
                .expect("couldn't write new file");
        }
    }

    return Ok(());
}

//////////
// MAIN //
//////////

fn main() -> Result<()> {
    let matches = App::new("memex")
        .version("0.2")
        .author("xander johnson xander@metasyn.pw")
        .about("personal memex")
        .arg(
            Arg::with_name("v")
                .short("v")
                .multiple(true)
                .help("sets the level of verbosity."),
        )
        .arg(
            Arg::with_name("content")
                .short("c")
                .long("content")
                .help("sets the content folder"),
        )
        .arg(
            Arg::with_name("template")
                .short("t")
                .long("template")
                .help("sets the template"),
        )
        .arg(
            Arg::with_name("destination")
                .short("d")
                .long("destination")
                .help("sets the destination directory"),
        )
        .arg(
            Arg::with_name("resources")
                .short("r")
                .long("resources")
                .help("sets the resources directory"),
        )
        .subcommand(App::new("build").about("builds the memex"))
        .subcommand(App::new("rss").about("adds a new rss item"))
        .subcommand(
            App::new("watch")
                .about("watches for file system changes and builds the memex on each change"),
        )
        .subcommand(
            App::new("rename")
                .about("updates internal page id across entries")
                .arg(
                    Arg::with_name("old")
                        .required(true)
                        .long("old")
                        .short("o")
                        .help("old name")
                        .takes_value(true),
                )
                .arg(
                    Arg::with_name("new")
                        .required(true)
                        .long("new")
                        .short("n")
                        .help("new name")
                        .takes_value(true),
                ),
        )
        .get_matches();

    setup().expect("couldn't setup.");

    let content_path = matches.value_of("content").unwrap_or("content/entries");
    let template_path = matches
        .value_of("template")
        .unwrap_or("templates/base.html");
    let destination_path = matches.value_of("destination").unwrap_or("dist");
    let resources_path = matches.value_of("resources").unwrap_or("resources");

    if matches.subcommand_matches("build").is_some() {
        let b = build(
            content_path,
            template_path,
            destination_path,
            resources_path,
        );

        if b.is_ok() {
            hey("✨ Done!".bright_cyan().to_string());
        }

        return b;
    }

    if matches.subcommand_matches("watch").is_some() {
        let res = watch(
            content_path,
            template_path,
            destination_path,
            resources_path,
        );
        if res.is_err() {
            let msg = format!("error watching: {}", res.unwrap_err().to_string());
            return Err(Error::new(ErrorKind::Other, msg));
        }
    }

    if let Some(matches) = matches.subcommand_matches("rename") {
        let old = matches.value_of("old").expect("no old value provided");
        let new = matches.value_of("new").expect("no new value provided");
        return rename(content_path, old, new);
    }

    if matches.subcommand_matches("rss").is_some() {
        let rss_path = Path::new("rss.xml").to_path_buf();
        return add_rss_post(rss_path);
    }

    let msg = "invalid command";
    return Err(Error::new(ErrorKind::Other, msg));
}

///////////
// TESTS //
///////////

#[cfg(test)]
mod tests {
    // import namespace above here
    use super::*;

    #[test]
    fn test_make_template() {
        assert_eq!(make_template("test"), "{{ test }}")
    }

    #[test]
    fn test_replace_template() {
        assert_eq!(
            replace_template(Arc::new(HashMap::new()), "{{ test }}", "test", "fab"),
            "<p>fab</p>\n"
        )
    }

    #[test]
    fn test_replace_templates() {
        assert_eq!(
            replace_templates(
                Arc::new(HashMap::new()),
                "{{ test }} {{ something }}",
                vec![("test", "fab"), ("something", "replacement")],
            ),
            "<p>fab</p>\n <p>replacement</p>\n"
        )
    }
}
